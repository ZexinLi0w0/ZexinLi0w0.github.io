<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Learn from Others</title>
    <url>/post/8041.html</url>
    <content><![CDATA[<h1 id="Learning-from-others"><a href="#Learning-from-others" class="headerlink" title="Learning from others"></a>Learning from others</h1><ol>
<li><a href="https://yichez.site/myblog/index.html">A road to become a good researcher in computer architecture &amp; security</a> from Mr. Yicheng Zhang.</li>
<li><a href="http://www.tcse.cn/~wsdou/advice/deadline-chen.pdf">和导师一起赶文章死线（Deadline）的十大注意事项</a> from Dr. Yiran Chen.</li>
<li><a href="https://wadmes.github.io/about/">教诲</a> from Wei Li.</li>
<li><a href="https://www.linzhong.org/opinions/writing.html">Tips about writing systems papers</a>.</li>
<li><a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效地报告 Bug</a>.</li>
<li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">How To Ask Questions The Smart Way</a>.</li>
<li><a href="https://yichez.site/myblog/readings/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BC%9A%E8%AE%AE%E8%AE%BA%E6%96%87%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%84%E5%AE%A1%E7%9A%84.pdf">计算机系统会议论文是如何评审的</a> from Dr. Haibo Chen.</li>
<li><a href="https://yichez.site/myblog/readings/five_year_summary_of_PhD.pdf">博士五年总结系列</a>.</li>
<li><a href="https://yichez.site/myblog/readings/%E4%B8%80%E5%90%8D%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E6%94%80%E7%99%BB%E4%B9%8B%E8%B7%AF.pdf">一名系统研究者的攀登之路</a> from Dr. Haibo Chen.</li>
<li><a href="https://csdiy.wiki/">CS自学指南</a>.</li>
</ol>
]]></content>
      <categories>
        <category>writing</category>
      </categories>
      <tags>
        <tag>journal</tag>
      </tags>
  </entry>
  <entry>
    <title>NVIDIA Jetson R&amp;D Notes</title>
    <url>/post/226.html</url>
    <content><![CDATA[<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><p><a href="https://gist.github.com/andrewssobral/ae77483b8fa147cce98b5b92f1a5ae17"><font color="#dd0000">A pretty comprehensive NVIDIA Jetson AGX Xavier cheatsheet</font></a><br><a href="https://blog.zexinli.com/post/c7c5.html">Jetson Install PyG</a><br><a href="https://blog.zexinli.com/post/5c1d.html">Jetson Build Torchvision</a><br><a href="https://blog.zexinli.com/post/667f.html">Jetson PyTorch Bypass Distributed Errors</a><br><a href="https://blog.zexinli.com/post/a8e8.html">Jetson change swap memory</a><br><a href="https://blog.zexinli.com/post/4817.html">Jetson mount nvme disk</a><br><a href="https://blog.zexinli.com/post/e092.html">Jetson set huggingface cache</a><br><a href="https://blog.zexinli.com/post/70a3.html">Jetson install GPU TensorFlow</a><br><a href="https://blog.zexinli.com/post/160b.html">Jetson install GPU PyTorch</a><br><a href="https://blog.zexinli.com/post/2ef9.html">Configure a same virtual environment on server as Jetson</a><br><a href="https://blog.zexinli.com/post/dbaf.html">Tensorflow issues &amp; solution</a><br><a href="https://blog.zexinli.com/post/cc0b.html">Flash NVIDIA Jetson TX2</a><br><a href="https://blog.zexinli.com/post/ec04.html">NVIDIA Jetson install tensorflow 2.x from source code</a><br><a href="https://blog.zexinli.com/post/6311.html"><font color="#dd0000">[zh]</font> NVIDIA Jetson install tensorflow 2.x from source code</a><br><a href="https://blog.zexinli.com/post/12cc.html"><font color="#dd0000">[zh]</font> Flash NVIDIA Jetson TX2</a></p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Download ImageNet1k from HuggingFace</title>
    <url>/post/175f.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>To whom needs access ImageNet-1k from HuggingFace Hub.</p>
<h1 id="Prerequisite-checklist"><a href="#Prerequisite-checklist" class="headerlink" title="Prerequisite checklist"></a>Prerequisite checklist</h1><ol>
<li>Enough disk (&gt;150GB)</li>
<li>Anaconda pip</li>
<li>Run the following code:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install datasets</span><br><span class="line"><span class="meta"># </span><span class="language-bash">use a linux <span class="built_in">command</span> screen to prevent session crashed</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">refer to https://www.geeksforgeeks.org/screen-command-in-linux-with-examples/</span></span><br><span class="line">screen -S download</span><br><span class="line"><span class="meta"># </span><span class="language-bash">get a token from https://huggingface.co/settings/tokens</span></span><br><span class="line">huggingface-cli login</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Download-ImageNet-1k-with-Token-Assess"><a href="#Download-ImageNet-1k-with-Token-Assess" class="headerlink" title="Download ImageNet-1k with Token Assess"></a>Download ImageNet-1k with Token Assess</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># refer to https://huggingface.co/datasets/imagenet-1k</span></span><br><span class="line"><span class="comment"># refer to https://discuss.huggingface.co/t/imagenet-1k-is-not-available-in-huggingface-dataset-hub/25040</span></span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dset = load_dataset(<span class="string">&#x27;imagenet-1k&#x27;</span>, split=<span class="string">&#x27;train&#x27;</span>, use_auth_token=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Migrate user from /home to new disk</title>
    <url>/post/d290.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>Sometimes we need to migrate user from /home to new disk, e.g., when the boot disk is full. This post is a note for this process.</p>
<h1 id="Prerequisite-checklist"><a href="#Prerequisite-checklist" class="headerlink" title="Prerequisite checklist"></a>Prerequisite checklist</h1><p>Check if the new disk is mounted correctly by <code>df -h</code>. If not, mount it by <code>sudo mount $&#123;DEVICE_NAME&#125; $&#123;MOUNT_POINT&#125;</code>.</p>
<h1 id="Move-user-home-directory"><a href="#Move-user-home-directory" class="headerlink" title="Move user home directory"></a>Move user home directory</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv /home/$&#123;USER_NAME&#125; $&#123;MOUNT_POINT&#125;</span><br><span class="line">sudo ln -s $&#123;MOUNT_POINT&#125;/$&#123;USER_NAME&#125; /home/$&#123;USER_NAME&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Important-Make-sure-the-permission-is-correct-for-the-new-home-directory"><a href="#Important-Make-sure-the-permission-is-correct-for-the-new-home-directory" class="headerlink" title="(Important) Make sure the permission is correct for the new home directory"></a>(Important) Make sure the permission is correct for the new home directory</h1><p>The permission of the new home directory should be <code>755</code> and the permission of <code>.ssh</code> and <code>authorized_keys</code> should be <code>700</code> and <code>600</code> respectively. Otherwise, ssh login will fail.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 $&#123;MOUNT_POINT&#125;/$&#123;USER_NAME&#125;</span><br><span class="line">sudo chmod 700 $&#123;MOUNT_POINT&#125;/$&#123;USER_NAME&#125;/.ssh</span><br><span class="line">sudo chmod 600 $&#123;MOUNT_POINT&#125;/$&#123;USER_NAME&#125;/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Install PyG on Arm Platform</title>
    <url>/post/c7c5.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>To whom needs GPU version of PyG on NVIDIA Jetson (or MacBook with Apple Silicon). Please refer to <a href="https://wadmes.github.io/2023/05/12/InstallPYG/">link</a>.</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson Build Torchvision</title>
    <url>/post/5c1d.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>To whom needs GPU version of Torchvision running on NVIDIA Jetson. - Cannot simply install torchvision by pip.</p>
<h1 id="Prerequisite-checklist"><a href="#Prerequisite-checklist" class="headerlink" title="Prerequisite checklist"></a>Prerequisite checklist</h1><ol>
<li>Check model of embedded board</li>
<li>Prepare a virtual python environment (e.g., <a href="https://github.com/conda-forge/miniforge">miniforge3</a>), it’s not suggested to follow NVIDIA official version of guideline to install code by sudo (which may mess up system python environments).</li>
<li>Check pre-built binary files on <a href="https://developer.download.nvidia.com/compute/redist/jp/">Jetson binaries</a>, if there are some appropriate prebuilt wheels, then download them. Make sure to rename them into the formate like “ torch-1.10.0-cp36-cp36m-linux_aarch64.whl”.</li>
<li>Install PyTorch via this <a href="https://blog.zexinli.com/post/160b.html">blog</a>.</li>
<li>Query <a href="https://pypi.org/project/torchvision/">Torchvision version</a> compatible with current PyTorch version.</li>
</ol>
<h1 id="Install-by-source-code"><a href="#Install-by-source-code" class="headerlink" title="Install by source code"></a>Install by source code</h1><p>Refer to <a href="https://forums.developer.nvidia.com/t/torchvision-issues-for-import-torchvision-transforms/267156">this blog from NVIDIA forum</a></p>
<p>After installing PyTorch by wheels from NVIDIA, then install torchvision by source code to avoid compatibility issues.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libopenblas-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">git clone --branch &lt;version&gt; https://github.com/pytorch/vision torchvision   # see below for version of torchvision to download</span><br><span class="line">cd torchvision</span><br><span class="line">export BUILD_VERSION=0.x.0  # where 0.x.0 is the torchvision version  </span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="keyword">for</span> instance: 0.16.0 refers to PyTorch v2.1.0</span></span><br><span class="line">python setup.py install --user</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson PyTorch Bypass Distributed Errors</title>
    <url>/post/667f.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>To whom needs Running PyTorch HuggingFace based model inference on NVIDIA Jetson.</p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>When running PyTorch HuggingFace based model inference on NVIDIA Jetson, the following error may occur:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  File &quot;BERT.py&quot;, line 60, in &lt;module&gt;</span><br><span class="line">    model = AutoModelForCausalLM.from_pretrained(&quot;bert-base-uncased&quot;).to(device)</span><br><span class="line">  File &quot;/experiment/miniforge3/envs/dytransformer/lib/python3.8/site-packages/transformers/models/auto/auto_factory.py&quot;, line 563, in from_pretrained</span><br><span class="line">    return model_class.from_pretrained(</span><br><span class="line">  File &quot;/experiment/miniforge3/envs/dytransformer/lib/python3.8/site-packages/transformers/modeling_utils.py&quot;, line 2359, in from_pretrained</span><br><span class="line">    if is_fsdp_enabled():</span><br><span class="line">  File &quot;/experiment/miniforge3/envs/dytransformer/lib/python3.8/site-packages/transformers/modeling_utils.py&quot;, line 118, in is_fsdp_enabled</span><br><span class="line">    return torch.distributed.is_initialized() and strtobool(os.environ.get(&quot;ACCELERATE_USE_FSDP&quot;, &quot;False&quot;)) == 1</span><br><span class="line">AttributeError: module &#x27;torch.distributed&#x27; has no attribute &#x27;is_initialized&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>The reason why this bug occurs is that the PyTorch wheel compiled for Jetson is not compiled with distributed support. One quick solution is to bypass the distributed module.</p>
<p>Change file <code>&quot;/experiment/miniforge3/envs/dytransformer/lib/python3.8/site-packages/transformers/modeling_utils.py&quot;</code> line 118 from</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> torch.distributed.is_initialized() <span class="keyword">and</span> strtobool(os.environ.get(<span class="string">&quot;ACCELERATE_USE_FSDP&quot;</span>, <span class="string">&quot;False&quot;</span>)) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>to</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson Change Swap Memory</title>
    <url>/post/a8e8.html</url>
    <content><![CDATA[<h1 id="Jtop"><a href="#Jtop" class="headerlink" title="Jtop"></a>Jtop</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo jtop</span><br></pre></td></tr></table></figure>
<h1 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson Set HuggingFace Cache</title>
    <url>/post/e092.html</url>
    <content><![CDATA[<p>Refer to <a href="https://huggingface.co/docs/huggingface_hub/package_reference/environment_variables">https://huggingface.co/docs/huggingface_hub/package_reference/environment_variables</a>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Add this command to ~/.bashrc</span><br><span class="line"># Defaults to &quot;~/.cache/huggingface&quot;</span><br><span class="line">export HF_HOME=/experiments/.cache/huggingface</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson Mount NVME</title>
    <url>/post/4817.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/nvme0n1 /experiments</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson install GPU TensorFlow</title>
    <url>/post/70a3.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>To whom needs GPU version of TensorFlow running on NVIDIA Jetson.</p>
<h1 id="Prerequisite-checklist"><a href="#Prerequisite-checklist" class="headerlink" title="Prerequisite checklist"></a>Prerequisite checklist</h1><ol>
<li>Check model of embedded board</li>
<li>Prepare a virtual python environment (e.g., <a href="https://github.com/conda-forge/miniforge">miniforge3</a>), it’s not suggested to follow NVIDIA official version of guideline to install code by sudo (which may mess up system python environments).</li>
<li>Check pre-built binary files on <a href="https://developer.download.nvidia.com/compute/redist/jp/">Jetson binaries</a>, if there are some appropriate prebuilt wheels, then download them. Make sure to rename them into the formate like “tensorflow-2.10.0+nv22.10-cp38-cp38-linux_aarch64.whl”.</li>
<li>Run the following code:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="keyword">for</span> AGX with Jetpack 5.0.2, python 3.8.10 is suggested.</span></span><br><span class="line">conda create -n pytorch_env python=3.8.10</span><br><span class="line">conda activate pytorch_env</span><br><span class="line">pip install pip testresources setuptools</span><br><span class="line"><span class="meta"># </span><span class="language-bash">install by wheel file (example <span class="keyword">for</span> Jetpack 5.0.2)</span></span><br><span class="line">pip install tensorflow-2.10.0+nv22.10-cp38-cp38-linux_aarch64.whl</span><br><span class="line"><span class="meta"># </span><span class="language-bash">For tensorflow 1.x, tensorflow-1.15.5+nv22.12-cp38-cp38-linux_aarch64.whl is suggested.</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Install-by-source-code-not-suggested"><a href="#Install-by-source-code-not-suggested" class="headerlink" title="Install by source code (not suggested)"></a>Install by source code (not suggested)</h1><p>Unless you really need some typical version of <a href="https://github.com/tensorflow/tensorflow">TensorFlow</a>, otherwise to build a PyTorch wheel is really unnecessary (time-consuming, bug-filled, lack of documents)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tensorflow/tensorflow</span><br><span class="line">cd tensorflow</span><br><span class="line"><span class="meta"># </span><span class="language-bash">later similar to TensorFlow build (The specific procedure is omitted here)</span></span><br></pre></td></tr></table></figure>
<p>TensorFlow refer to <a href="https://blog.zexinli.com/post/ec04.html">en</a> or <a href="https://blog.zexinli.com/post/6311.html">zh</a>.</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson install GPU PyTorch</title>
    <url>/post/160b.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>To whom needs GPU version of PyTorch running on NVIDIA Jetson.</p>
<h1 id="Prerequisite-checklist"><a href="#Prerequisite-checklist" class="headerlink" title="Prerequisite checklist"></a>Prerequisite checklist</h1><ol>
<li>Check model of embedded board</li>
<li>Prepare a virtual python environment (e.g., <a href="https://github.com/conda-forge/miniforge">miniforge3</a>), it’s not suggested to follow NVIDIA official version of guideline to install code by sudo (which may mess up system python environments).</li>
<li>Check pre-built binary files on <a href="https://developer.download.nvidia.com/compute/redist/jp/">Jetson binaries</a>, if there are some appropriate prebuilt wheels, then download them. Make sure to rename them into the formate like “ torch-1.10.0-cp36-cp36m-linux_aarch64.whl”.</li>
<li>Run the following code:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="keyword">for</span> Jetpack version &gt;= 5.0.2, python 3.8.10 is suggested.</span></span><br><span class="line">conda create -n pytorch_env python=3.8.10</span><br><span class="line">conda activate pytorch_env</span><br><span class="line">pip install pip testresources setuptools</span><br><span class="line"><span class="meta"># </span><span class="language-bash">install by wheel file (example <span class="keyword">for</span> newest Jetpack 5.1.2)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">News: PyTorch 2.0.0 prebuilt is supported right now.</span></span><br><span class="line">pip install torch-2.0.0+nv23.05-cp38-cp38-linux_aarch64.whl</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Install-by-source-code-not-suggested"><a href="#Install-by-source-code-not-suggested" class="headerlink" title="Install by source code (not suggested)"></a>Install by source code (not suggested)</h1><p>Unless you really need some typical version of <a href="https://github.com/pytorch/pytorch">PyTorch</a>, otherwise to build a PyTorch wheel is really unnecessary (time-consuming, bug-filled, lack of documents)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install python3-dev python3-pip libopenblas-base libopenmpi-dev libomp-dev libopenblas-dev libopenmpi-dev</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Download a newer version of cmake <span class="keyword">for</span> building PyTorch from <span class="built_in">source</span></span></span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3-linux-aarch64.tar.gz</span><br><span class="line">tar -xvzf cmake-3.28.3-linux-aarch64.tar.gz</span><br><span class="line">export PATH=/path/to/cmake-3.28.3-linux-aarch64/bin:$PATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">avalanche-lib requires this pytorch.distributed; so cannot use Jetson pre-built wheels</span></span><br><span class="line">export USE_NCCL=0</span><br><span class="line">export USE_DISTRIBUTED=1                    </span><br><span class="line">export USE_QNNPACK=0</span><br><span class="line">export USE_PYTORCH_QNNPACK=0</span><br><span class="line">export TORCH_CUDA_ARCH_LIST=&quot;7.2;8.7&quot;   # &quot;7.2;8.7&quot; for JetPack 5 wheels for Xavier/Orin</span><br><span class="line">export PYTORCH_BUILD_VERSION=2.1.0  # without the leading &#x27;v&#x27;, e.g. 1.3.0 for PyTorch v1.3.0</span><br><span class="line">export PYTORCH_BUILD_NUMBER=1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Build GPU-enabled PyTorch from <span class="built_in">source</span> <span class="keyword">for</span> v2.1.0</span></span><br><span class="line">git clone --recursive --branch v2.1.0 http://github.com/pytorch/pytorch</span><br><span class="line">cd pytorch</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install scikit-build</span><br><span class="line">pip install ninja</span><br><span class="line">python setup.py bdist_wheel</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>TensorFlow refer to <a href="https://blog.zexinli.com/post/ec04.html">en</a> or <a href="https://blog.zexinli.com/post/6311.html">zh</a>.</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Configure a same virtual environment on server as Jetson</title>
    <url>/post/2ef9.html</url>
    <content><![CDATA[<h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>Note: these commands are for x86 based server, not for Jetson itself.</p>
<p>For Jetpack 4.6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n py36 python=3.6</span><br><span class="line">conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure>

<p>For Jetpack 5.0+</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n py38 python=3.8.10</span><br><span class="line">conda install pytorch==1.13.0 cudatoolkit=11.8 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Save your Ubuntu from black/purple screen</title>
    <url>/post/31eb.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>Save your Ubuntu PC/server from black/purple screen.</p>
<h1 id="Checklists-Hardware-check"><a href="#Checklists-Hardware-check" class="headerlink" title="Checklists [Hardware check]"></a>Checklists [Hardware check]</h1><ol>
<li>Restart and press [F2/F6/F8/F10], try to get into BIOS. Check CPU/Memory are in good status.</li>
<li>Try to remove the HDMI/DP cable from GPU and connect it to the motherboard and reboot. If you could get into system without problem now, The possible reason is that the recovery mode temporarily disabled the GPU, and then a normal reboot will re-enable the GPU.</li>
</ol>
<h1 id="Checklists-Software-check"><a href="#Checklists-Software-check" class="headerlink" title="Checklists [Software check]"></a>Checklists [Software check]</h1><ol>
<li>Select Boot Ubuntu in BIOS.</li>
<li>Press [Esc] and [e] to enter grub while booting. (if you could see grub).</li>
<li>use arrow keys to select [Advanced Mode] and press [e] to edit configuration.</li>
<li>use the arrow keys to locate the end of the line that starts with<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;linux /boot/vmlinuz***&quot;</span><br></pre></td></tr></table></figure>
type <code>nomodeset</code> to make that line to temporarily disable GPU driver.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;... ro quiet sqlash nomodeset ...&quot;</span><br></pre></td></tr></table></figure></li>
<li>Fix GPU driver or something else when get into the systems, then reboot can solve the problem.</li>
</ol>
<h1 id="Last-Hope"><a href="#Last-Hope" class="headerlink" title="Last Hope"></a>Last Hope</h1><p>If the above methods still don’t save your Ubuntu, locating exactly what went wrong and fixing it is expected to be difficult. Probably the most efficient solution is to reinstall Ubuntu (using with caution ONLY and backing up your data).</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA reinstallment</title>
    <url>/post/a961.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>Save your PC/server in CUDA driver crashed down.</p>
<h1 id="Prequisite"><a href="#Prequisite" class="headerlink" title="Prequisite"></a>Prequisite</h1><ol>
<li>Host machine: A PC/laptop/server with Intel/AMDx86 architeture and Ubuntu installed, can be connected to <b style='color:red;'>network</b>.</li>
<li>Physical disk: &gt;10GB available.</li>
<li>sudo</li>
</ol>
<h1 id="Remove-old-driver"><a href="#Remove-old-driver" class="headerlink" title="Remove old driver"></a>Remove old driver</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt purge nvidia*</span><br><span class="line">sudo apt purge cuda*</span><br><span class="line">sudo apt clean</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h1 id="Follow-instructions-in-NVIDIA-official-website"><a href="#Follow-instructions-in-NVIDIA-official-website" class="headerlink" title="Follow instructions in NVIDIA official website"></a>Follow instructions in NVIDIA official website</h1><p>For example: <a href="https://developer.nvidia.com/cuda-downloads">NVIDIA</a></p>
<h1 id="Reboot-and-configure-environmental-variables"><a href="#Reboot-and-configure-environmental-variables" class="headerlink" title="Reboot and configure environmental variables"></a>Reboot and configure environmental variables</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br><span class="line">export PATH=/usr/local/cuda/bin:$PATH</span><br><span class="line"># or write into ~/.bashrc</span><br><span class="line">nvcc --version</span><br><span class="line"># check nvcc for verfication</span><br></pre></td></tr></table></figure>

<h1 id="Download-cuDNN-package-and-copy-them-into-CUDA-PATH"><a href="#Download-cuDNN-package-and-copy-them-into-CUDA-PATH" class="headerlink" title="Download cuDNN package and copy them into CUDA PATH"></a>Download cuDNN package and copy them into CUDA PATH</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget ...</span><br><span class="line">sudo dpkg -i ...</span><br><span class="line">ls | grep cudnn | xargs -I&#123;&#125; sudo cp &#123;&#125; /usr/local/cuda/include</span><br><span class="line">ls | grep cudnn | xargs -I&#123;&#125; sudo cp &#123;&#125; /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>

<p>Or goes to NVIDIA Official Site to download: <a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a></p>
<h1 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libfreeimage3 libfreeimage-dev # install dependencies</span><br><span class="line">cp -r /usr/src/cudnn_samples_v8/ ~</span><br><span class="line">cd cudnn_samples_v8/</span><br><span class="line">cd mnistCUDNN/</span><br><span class="line">make</span><br><span class="line">./mnistCUDNN</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow issues &amp; solution</title>
    <url>/post/dbaf.html</url>
    <content><![CDATA[<h1 id="Problem-on-NVIDIA-Jetson-Development-Kit"><a href="#Problem-on-NVIDIA-Jetson-Development-Kit" class="headerlink" title="Problem on NVIDIA Jetson Development Kit"></a>Problem on NVIDIA Jetson Development Kit</h1><ol start="0">
<li>Refer enviroment variables:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.environ[&#x27;TF_CPP_MIN_VLOG_LEVEL&#x27;] = &#x27;1&#x27; # Low level of Tensorflow, if need locating bugs, raise it up to 10.</span><br><span class="line">os.environ[&#x27;CUDA_CACHE_MAXSIZE&#x27;] = &quot;2147483648&quot; # Enable CUDA_CACHE to avoid multiple long-last JIT compiling.</span><br><span class="line">os.environ[&#x27;TF_FORCE_GPU_ALLOW_GROWTH&#x27;] = &#x27;true&#x27; # Avoid allocating all memory rapidly in one process.</span><br><span class="line">os.environ[&#x27;TF_FORCE_UNIFIED_MEMORY&#x27;] = &#x27;1&#x27; # Use unified memory to reduce data transfer time.</span><br><span class="line">os.environ[&#x27;TF_ENABLE_GPU_GARBAGE_COLLECTION&#x27;] = &#x27;0&#x27; # Boost performance by disable GPU_GARBAGE_COLLCETION, enable only when meeting OOM.</span><br></pre></td></tr></table></figure></li>
<li>pip3 install h5py very slow/compilation failed: use root account to install pip dependencies.</li>
<li>local_cuda_not_found: switch to verified known version in the above.</li>
<li>c++ compiling error+cannot write file: need at least 32GB extra disk storage，NVIDIA Jetson internal storage is insufficient to a large amount of intermediate file while compiling tensorflow.</li>
<li>c++ compiling error+process xx killed: OOM error, for NVIDIA Jetson TX2/Nano, set 8GB swap first.</li>
<li>cannot import name ‘function_pb2’: switch current path, don’t try to run <code>import tensorflow</code> under Tensorflow source code path.</li>
<li>can compile and pip installation, but cannot pass test, stuck when executing testing files: since Jetpack default CUDA/CUDNN versions may be incompatible to tensorflow official guidance version. Possible solution: (1) use known tested version above (2) from Jetpack downloading corresponding version of CUDA/CUDNN then compiling tensorflow (3) goto <a href="https://forums.developer.nvidia.com/">NVIDIA forum</a>to ask official help.</li>
<li>C++ compilation of rule ‘//tensorflow/python:bfloat16_lib’ failed (Exit 1): For tensorflow&lt;=2.2, need to downgrade numpy version <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install &#x27;numpy&lt;1.19.0&#x27;</span><br><span class="line"># conda install &#x27;numpy&lt;1.19.0&#x27;</span><br></pre></td></tr></table></figure></li>
<li>Runtime error: “CUDA driver version is insufficient for CUDA runtime version”. cuda10.2+cudnn7.0 are incompatible, re-create soft link to cuda9.0+cudnn7.0 and compile again.</li>
<li>Executing long time python tensorflow script, may occur <code>CUDA_UNKNOWN_ERROR</code>: Maybe Tensorflow internal bug or memory problem. Possible solution: reboot the board; <code>pip uninstall tensorflow; pip install tensorflow-xxx.whl</code></li>
<li>Performance bug of tensorflow: need extremely long time to initialize GPU on TX2 (e.g., on TX2 initialize ResNet50 training requires over 20min): set environment variables <code>export CUDA_CACHE_MAXSIZ=&quot;2147483648&quot;</code> and run the tensorflow code twice.</li>
<li>When using unified memory, display ‘NvMapReserveOp 0x80000001 failed [22]’: limit Tensorflow allocating memory.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config = ConfigProto()</span><br><span class="line">config.gpu_options.per_process_gpu_memory_fraction = 0.2 # or other small values less than 1.0</span><br><span class="line">config.gpu_options.experimental.use_unified_memory= True</span><br><span class="line">with tf.compat.v1.Session(config=config) as s:</span><br><span class="line">    your_program</span><br></pre></td></tr></table></figure></li>
<li>Performance bug: <code>W tensorflow/core/common_runtime/bfc_allocator.cc:311] Garbage collection: deallocate free memory regions (i.e., allocations) so that we can re-allocate a larger region to avoid OOM due to memory fragmentation. If you see this message frequently, you are running near the threshold of the available device memory and re-allocation may incur great performance overhead. You may try smaller batch sizes to observe the performance impact. Set TF_ENABLE_GPU_GARBAGE_COLLECTION=false if you&#39;d like to disable this feature.</code>: define enviroment variables<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.environ[&#x27;TF_ENABLE_GPU_GARBAGE_COLLECTION&#x27;] = &#x27;0&#x27;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>NVIDIA Jetson install tensorflow 2.x from source code</title>
    <url>/post/ec04.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>Q: Who needs install tensorflow from source code?<br>A: 1. tensorflow developer (or anyone want to improve it); 2. developers who need a specific version of tensorflow but don’t have the resources to download itds. <b style="color: red">Note: only using tensorflow API are not required to building from source, suggested to use <b>NVIDIA offcial tensorflow image</b>, or download <b>built .whl file</b> and install from pip.</b></p>
<h1 id="Install-Tensorflow-1-x-from-Source-Code"><a href="#Install-Tensorflow-1-x-from-Source-Code" class="headerlink" title="Install Tensorflow 1.x from Source Code"></a>Install Tensorflow 1.x from Source Code</h1><p>Jetsonhacks offers <a href="https://github.com/jetsonhacks/installTensorFlowTX2">github installation guidance<a>。</p>
<h1 id="Install-Tensorflow-2-x-from-Source-Code"><a href="#Install-Tensorflow-2-x-from-Source-Code" class="headerlink" title="Install Tensorflow 2.x from Source Code"></a>Install Tensorflow 2.x from Source Code</h1><p>Currently nearly no concrete instructions for building Tensorflow 2.x from source. If have any problem, please see the below section: [Potential Problem].</p>
<h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ol start="0">
<li>Read official guidance to check the target version.<a href="https://www.tensorflow.org/install/source/">tensorflow official guidance</a> <a href="https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html">NVIDIA building tensorflow official guidance</a><br><b style="color: red">Currently can build/run: </li>
<li>Jetpack 3.3 (python 3.5/3.6) + CUDA 10.2 + CUDNN 7.1 + tensorflow r2.2;</li>
<li>Jetpack 4.6 (python 3.6) + CUDA 10.2 + CUDNN 7.1 + tensorflow r2.2;</li>
<li>(recommended)Jetpack 4.6 (python 3.6) + CUDA 10.2 + CUDNN 8.2 + tensorflow r2.4。</b></li>
<li>Flash the board correctly (begin from clean os): Use NVIDIA offcial SDKmanager to install Jetpack【<a href="https://zexinli0w0.github.io/post/12cc.html">How to flash Jetson board</a>】. For instance, TX2 supports Jetpack version 4.6, 4.5.1, 4.5, 3.3. Note: 4.5+version may result in CUDA/CUDNN imcompatible.</li>
<li>Install python dependencies<br>For jetpack 4.5+<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install -U pip testresources setuptools==49.6.0 </span><br><span class="line">sudo pip3 install -U --no-deps numpy==1.18.5 future==0.18.2 mock==3.0.5 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.4.0 protobuf pybind11 cython pkgconfig</span><br><span class="line">sudo env H5PY_SETUP_REQUIRES=0 pip3 install -U h5py==2.10.0</span><br></pre></td></tr></table></figure>
For jetpack 3.3<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">curl -fsSL https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3.5 # pip3 has abandoned python 3.5 support, cannot use apt to install python3.5 pip</span><br><span class="line">sudo pip3 install -U testresources setuptools</span><br><span class="line">sudo pip3 install -U --no-deps numpy future mock keras_preprocessing keras_applications gast protobuf pybind11 cython pkgconfig</span><br><span class="line">sudo env H5PY_SETUP_REQUIRES=0 pip3 install -U h5py</span><br></pre></td></tr></table></figure>
Note: python dependenceis may conflict and result in <code>import core dumped</code>. Best check by a reactive python3 by importing these dependencies. One common feasible solution is to downgrade numpy to 1.18.5.</li>
<li>Install JDK dependencies<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ref to &lt;a href=&quot;https://docs.bazel.build/versions/main/install-ubuntu.html&quot;&gt;link&lt;/a&gt;</span><br><span class="line"># For jetpack 4.5+ Ubuntu 18.04 (LTS) uses OpenJDK 11 by default:</span><br><span class="line">sudo apt-get install openjdk-11-jdk</span><br><span class="line"># For jetpack 3.3 Ubuntu 16.04 (LTS) uses OpenJDK 8 by default:</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li>
<li>Install bazel<br>Build bazel，the version refers to .bazelversion on <code>/tensorflow</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir bazel-$BAZEL_VERSION</span><br><span class="line">cd bazel-$BAZEL_VERSION</span><br><span class="line">wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-dist.zip</span><br><span class="line">unzip bazel-$BAZEL_VERSION-dist.zip</span><br><span class="line">rm bazel-bazel-$BAZEL_VERSION-dist.zip</span><br><span class="line">./compile.sh</span><br><span class="line">sudo cp output/bazel /usr/local/bin</span><br><span class="line">bazel version</span><br></pre></td></tr></table></figure></li>
<li>Enable swap for board with less than 16GB memory<br>o.w., may result in <b>OOM error</b> -&gt; Error: c++ compiling error *** Killed<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fallocate -l 8G swapfile</span><br><span class="line">chmod 600 swapfile</span><br><span class="line">mkswap swapfile</span><br><span class="line">sudo swapon swapfile</span><br><span class="line">swapon -s</span><br></pre></td></tr></table></figure>
Or directly use the script offered by jetsonhack<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/jetsonhacks/installTensorFlowTX2/master/createSwapfile.sh</span><br><span class="line">./createSwapfile.sh -d /experiment -s 8</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Compilation-Installation-Testing"><a href="#Compilation-Installation-Testing" class="headerlink" title="Compilation/Installation/Testing"></a>Compilation/Installation/Testing</h2><ol>
<li>Get source code<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tensorflow/tensorflow.git</span><br><span class="line">cd tensorflow</span><br><span class="line">git checkout r2.2 # 对于jetpack 3.3</span><br></pre></td></tr></table></figure></li>
<li>Configuration/Compilation<br>Note: very time consuming, best with an disconnection prevention session (e.g. tmux)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Configure correct path of python interpreter，enable CUDA</span><br><span class="line">./configure</span><br><span class="line"># Set output_base path (default is ~/.cache/), o.w. cross-disk will cause compilation to be much slower than without cross-disk</span><br><span class="line">bazel --output_base=/experiment/tensorflow_pkg build --verbose_failures --config=noaws --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line">./bazel-bin/tensorflow/tools/pip_package/build_pip_package /experiment/tensorflow_tmp</span><br></pre></td></tr></table></figure></li>
<li>Install tensorflow .whl<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install /experiment/tensorflow_tmp/tensorflow-$version-$tags.whl</span><br></pre></td></tr></table></figure></li>
<li>Testing<br>Smoking Test<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt; import tensorflow</span><br><span class="line">&gt;&gt; exit()</span><br></pre></td></tr></table></figure>
GPU/MNIST<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Refer to two files under https://github.com/peterlee0127/tensorflow-nvJetson/tree/master/tf-test</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Potential-Problem"><a href="#Potential-Problem" class="headerlink" title="Potential Problem"></a>Potential Problem</h1><ol>
<li>pip3 install h5py very slow/compilation failed: use root account to install pip dependencies.</li>
<li>local_cuda_not_found: switch to verified known version in the above.</li>
<li>c++ compiling error+cannot write file: need at least 32GB extra disk storage，NVIDIA Jetson internal storage is insufficient to a large amount of intermediate file while compiling tensorflow.</li>
<li>c++ compiling error+process xx killed: OOM error, for NVIDIA Jetson TX2/Nano, set 8GB swap first.</li>
<li>cannot import name ‘function_pb2’: switch current path, don’t try to run <code>import tensorflow</code> under Tensorflow source code path.</li>
<li>can compile and pip installation, but cannot pass test, stuck when executing testing files: since Jetpack default CUDA/CUDNN versions may be incompatible to tensorflow official guidance version. Possible solution: (1) use known tested version above (2) from Jetpack downloading corresponding version of CUDA/CUDNN then compiling tensorflow (3) goto <a href="https://forums.developer.nvidia.com/">NVIDIA forum</a>to ask official help.</li>
<li>C++ compilation of rule ‘//tensorflow/python:bfloat16_lib’ failed (Exit 1): For tensorflow&lt;=2.2, need to downgrade numpy version <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install &#x27;numpy&lt;1.19.0&#x27;</span><br><span class="line"># conda install &#x27;numpy&lt;1.19.0&#x27;</span><br></pre></td></tr></table></figure></li>
<li>Runtime error: “CUDA driver version is insufficient for CUDA runtime version”. cuda10.2+cudnn7.0 are incompatible, re-create soft link to cuda9.0+cudnn7.0 and compile again.</li>
<li>Executing long time python tensorflow script, may occur <code>CUDA_UNKNOWN_ERROR</code>: Maybe Tensorflow internal bug or memory problem. Possible solution: reboot the board; <code>pip uninstall tensorflow; pip install tensorflow-xxx.whl</code></li>
<li>Performance bug of tensorflow: need extremely long time to initialize GPU on TX2 (e.g., on TX2 initialize ResNet50 training requires over 20min): set environment variables <code>export CUDA_CACHE_MAXSIZ=&quot;2147483648&quot;</code> and run the tensorflow code twice.</li>
<li>import numpy/tensorflow core dumped: Downgrade numpy&lt;=1.18.5</li>
<li>h5py installing stucks and cannot be successfully compiled, error ‘Cython is not installed’ with Cython installed: Downgrade numpy&lt;=1.18.5</li>
</ol>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Contest</title>
    <url>/post/1564.html</url>
    <content><![CDATA[<h1 id="Weekly-Contest-301"><a href="#Weekly-Contest-301" class="headerlink" title="Weekly Contest 301"></a>Weekly Contest 301</h1><p>Congratulations to 4A!<br>2909 / 24327 = 11.96%<br>Finish Time: 1:03:06<br>Q1: 0:03:38 -&gt; easy loop<br>Q2: 0:15:22 -&gt; greedy and map<br>Q3: 0:57:14 -&gt; greedy and map (use python) (take too much time)<br>Q4: 1:03:06 -&gt; very straightforward math</p>
<h1 id="Weekly-Contest-301-1"><a href="#Weekly-Contest-301-1" class="headerlink" title="Weekly Contest 301"></a>Weekly Contest 301</h1><p>5742 / 23561 = 24.37%<br>Finish Time: 1:26:18<br>Q1: 0:10:42 -&gt; easy greedy (take too much time)<br>Q2: 0:27:39 -&gt; priority queue (take too much time)<br>Q3: 1:16:18 (2 erros) -&gt; crash car problem<br>Q4: N/A -&gt; dynamic programming</p>
<h1 id="Weekly-Contest-286"><a href="#Weekly-Contest-286" class="headerlink" title="Weekly Contest 286"></a>Weekly Contest 286</h1><p>2766 / 21339 = 12.96%<br>Finish Time: 1:10:21<br>Q1: 0:06:04 -&gt; easy loop (take too much time)<br>Q2: 0:12:41 -&gt; greedy<br>Q3: 1:10:21 -&gt; modified binary search (slow implementation)<br>Q4: N/A -&gt; dynamic programming</p>
<h1 id="Weekly-Contest-283"><a href="#Weekly-Contest-283" class="headerlink" title="Weekly Contest 283"></a>Weekly Contest 283</h1><p>5044 / 19916 = 25.33%<br>Finish Time: 1:09:06<br>Q1: 0:10:51 -&gt; easy loop (1 bug)<br>Q2: 0:17:31 -&gt; easy loop + map<br>Q3: 0:44:06 -&gt; binary search (4 bugs) (long long error)<br>Q4L N/A -&gt; Trie tree or easy math</p>
<h1 id="Weekly-Contest-282"><a href="#Weekly-Contest-282" class="headerlink" title="Weekly Contest 282"></a>Weekly Contest 282</h1><p>3828 / 15143 = 25.28%<br>Finish Time: 1:35:40<br>Q1: 0:02:36 -&gt; easy loop<br>Q2: 0:05:17 -&gt; map<br>Q3: 1:10:40 (5 errors) -&gt; modified binary search<br>Q4: N/A -&gt; dynamic programming</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Flash NVIDIA Jetson TX2</title>
    <url>/post/cc0b.html</url>
    <content><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>NVIDIA Jetson Development Toolkit is based on arm64 architecure. Correpsondingly, many system libraries/deep learning libraries cannot be found&amp;intalled easily (compared to x86 platform). To solve such dependencies problem once and for all, NVIDIA offers official flashing tool (Jetpack). This article focuses on the technical details of <b>Jetpack 4.6 flashing</b>.</p>
<p>JetsonHacks offers official flashing turorial videos corresponding to different versions (<a href="https://www.youtube.com/watch?v=Pncjv6FoQzU">Jetpack 4.2 installation</a> <a href="https://www.youtube.com/watch?v=D7lkth34rgM">Jetpack 3.0 installation</a>) which may have some differences but similar to Jetpack 4.6. For older version (e.g., Jetpack 3.0), please ref to <a href="https://metrixlambert.github.io/2019/06/01/Jetson-TX2-%E5%AE%8C%E6%95%B4%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/">Jetson TX2 Flashing Tutorial</a>。</p>
<h1 id="Prequisite"><a href="#Prequisite" class="headerlink" title="Prequisite"></a>Prequisite</h1><ol>
<li>Host machine: An PC/laptop with Intel/AMDx86 architeture and Ubuntu 18.04 installed, can be connected to <b style='color:red;'>network</b>.</li>
<li>Physical disk: &gt;40GB available.</li>
<li>Installing Jetpack package: apply for NVIDIA developer account, then download Jetpack (newest version 4.6 is recommend) aat <a href="https://developer.nvidia.com/embedded/jetpack">NVIDIA</a> based on board hardware model.</li>
<li>A Mirco-USB data cable, an HDMI cable, one screen, mouse and keyboard.</li>
</ol>
<h1 id="Installing-Jetpack"><a href="#Installing-Jetpack" class="headerlink" title="Installing Jetpack"></a>Installing Jetpack</h1><ol>
<li>Disconnect the development board, disconnect the development board network cable, and connect the development board and host computer with the data cable. Double-click to run the Jetpack 4.6 installer (or command line install), then type in command: <code>sdkmanager</code> (make sure don’t use root here). After login NVIDIA developer account, tick host and target, select device hardware manually.</li>
<li>Create 2 new folders to store libraries files and targets image files.</li>
<li>Begin downloading and wait patiently to install OS (<b style='color:red;'>[Note]The development board is still powered off at this time</b>)</li>
<li>Sdkmanger will notify whether (auto flash)/(manual flash). Select (manual flash) and switch the board to <b>Recovery Mode</b>, for instance (Jetson TX2):<br>(a) Ensure that the development board is initially in a power-off state and that the Micro USB cable is properly connected<br>(b) Power on the development board, press power to boot, then quickly press and hold the recovery key without releasing, press the reset key, and release the recovery key after 2 seconds<br>(c) At this point there should be 2 green lights on</li>
<li>To verify that you are in the forced recovery state, type in the host command: <code>lsusb</code>. If <code>Nvidia Corp</code> is in device list then success, o.w. back to do step (4) again.</li>
<li>Connect the HDMI cable + screen to the development board. Then click <code>flash</code> on sdkmanager.</li>
<li>Wait patiently for the development board to initialize the ubuntu system (configure the account password). Sdkmanager will ask to choose the connection method + enter your account password. In this case, choose to use the <code>USB connection</code> with <code>default ip address</code>, and enter the account/password of the ubuntu system of the development board.</li>
<li>Wait patiently for long time until all libraries installed. Click <code>exit</code> to quit sdkmanager.</li>
</ol>
<h1 id="Further-Configuration"><a href="#Further-Configuration" class="headerlink" title="Further Configuration"></a>Further Configuration</h1><p>Connect the development board and check IP address with <code>ifconfig | grep eth0 -a1</code>. Then it can be accessed by ssh and configure as normal Ubuntu.</p>
<h1 id="Potential-Problems-and-Solutions"><a href="#Potential-Problems-and-Solutions" class="headerlink" title="Potential Problems and Solutions"></a>Potential Problems and Solutions</h1><ol>
<li>Slow downloading:<br>Replace the networking environment that can bypass firewall (GFW) and has sufficient bandwidth.</li>
<li>Strange issues in installing process reported by sdkmanager(e.g., dependencies error)<br>Replace the host machine with <b>clean</b>Ubuntu 18.04, most of these kinds of problems are due to system configuration conflicts, which are very difficult to locate and fix.</li>
<li>Performance bugs (Some CPU cores on board are idle)<br>rewrite /boot/extlinux/exltinux.conf <code>isolcpus=1-2</code> to <code>isolcpus=</code> (ref to <a href="https://blog.csdn.net/JanKin_BY/article/details/120441238">Performance bug solution to TX2</a>.</li>
</ol>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>NVIDIA Jetson从源码安装tensorflow 2.x</title>
    <url>/post/6311.html</url>
    <content><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>Q: 什么人需要源码安装tensorflow? </p>
<p>A: 1. tensorflow的开发者(想改进它的代码); 2. 需要指定版本tensorflow但没有下载资源的开发者。仅使用tensorflow API的开发者不需要编译，建议使用<b>NVIDIA官方镜像</b>，或者从官方下载<b>编译好的.whl文件</b>并使用pip安装。</p>
<h1 id="tensorflow-1-x源码安装"><a href="#tensorflow-1-x源码安装" class="headerlink" title="tensorflow 1.x源码安装"></a>tensorflow 1.x源码安装</h1><p>Jetsonhacks提供了<a href="https://github.com/jetsonhacks/installTensorFlowTX2">github安装指导<a>。</p>
<h1 id="tensorflow-2-x源码安装"><a href="#tensorflow-2-x源码安装" class="headerlink" title="tensorflow 2.x源码安装"></a>tensorflow 2.x源码安装</h1><p>目前公网基本没有编译2.x的教程，因此需要大量踩坑。遇到问题请查看文末【潜在问题】。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol start="0">
<li>查询官方指南确定需要安装的版本。<a href="https://www.tensorflow.org/install/source/">tensorflow官方编译指南</a> <a href="https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html">NVIDIA编译tensorflow指南</a></li>
</ol>
<p><b style="color: red">目前经测试可编译+运行: </p>
<ol>
<li><p>Jetpack 3.3 (python 3.5/3.6) + CUDA 10.2 + CUDNN 7.1 + tensorflow r2.2;</p>
</li>
<li><p>Jetpack 4.6 (python 3.6) + CUDA 10.2 + CUDNN 7.1 + tensorflow r2.2;</p>
</li>
<li><p>(推荐)Jetpack 4.6 (python 3.6) + CUDA 10.2 + CUDNN 8.2 + tensorflow r2.4。</b></p>
</li>
<li><p>正确刷机: 使用NVIDIA官方提供的NVIDIA SDK Manager刷入Jetpack【<a href="https://zexinli0w0.github.io/post/12cc.html">刷机教程</a>】。以TX2为例，目前Jetpack可选版本4.6, 4.5.1, 4.5, 3.3。注意: 4.5+版本CUDA/CUDNN版本较高，可能会出现不兼容情况。</p>
</li>
<li><p>安装python依赖库<br>对于jetpack 4.5+</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install -U pip testresources setuptools==49.6.0 </span><br><span class="line">sudo pip3 install -U --no-deps numpy==1.18.5 future==0.18.2 mock==3.0.5 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.4.0 protobuf pybind11 cython pkgconfig</span><br><span class="line">sudo env H5PY_SETUP_REQUIRES=0 pip3 install -U h5py==2.10.0</span><br></pre></td></tr></table></figure>
<p>对于jetpack 3.3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">curl -fsSL https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3.5 # 因为pip3已经放弃对python 3.5的支持, 所以不能从apt安装pip</span><br><span class="line">sudo pip3 install -U testresources setuptools</span><br><span class="line">sudo pip3 install -U --no-deps numpy future mock keras_preprocessing keras_applications gast protobuf pybind11 cython pkgconfig</span><br><span class="line">sudo env H5PY_SETUP_REQUIRES=0 pip3 install -U h5py</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意: python依赖库版本，装错可能会冲突和import core dumped。装完开一个交互式命令行python3尝试import这几个包。一个常见的方案是降级numpy版本至1.18.5。</p>
<ol start="3">
<li><p>安装jdk依赖库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考https://docs.bazel.build/versions/main/install-ubuntu.html</span><br><span class="line"># 对于jetpack 4.5+ Ubuntu 18.04 (LTS) uses OpenJDK 11 by default:</span><br><span class="line">sudo apt-get install openjdk-11-jdk</span><br><span class="line"># 对于jetpack 3.3 Ubuntu 16.04 (LTS) uses OpenJDK 8 by default:</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li>
<li><p>安装bazel<br>编译/下载安装bazel，版本号参考.bazelversion</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir bazel-$BAZEL_VERSION</span><br><span class="line">cd bazel-$BAZEL_VERSION</span><br><span class="line">wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-dist.zip</span><br><span class="line">unzip bazel-$BAZEL_VERSION-dist.zip</span><br><span class="line">rm bazel-bazel-$BAZEL_VERSION-dist.zip</span><br><span class="line">./compile.sh</span><br><span class="line">sudo cp output/bazel /usr/local/bin</span><br><span class="line">bazel version</span><br></pre></td></tr></table></figure></li>
<li><p>挂载交换区，否则可能会<b>内存错误</b>(编译期间使用超过8GB内存) -&gt; Error: c++ compiling error *** Killed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fallocate -l 8G swapfile</span><br><span class="line">chmod 600 swapfile</span><br><span class="line">mkswap swapfile</span><br><span class="line">sudo swapon swapfile</span><br><span class="line">swapon -s # 输出结果中应有priority -1的swap</span><br></pre></td></tr></table></figure>
<p>或者，直接使用jetsonhack提供的创建swap脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/jetsonhacks/installTensorFlowTX2/master/createSwapfile.sh</span><br><span class="line">./createSwapfile.sh -d /experiment -s 8</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编译-安装-测试"><a href="#编译-安装-测试" class="headerlink" title="编译/安装/测试"></a>编译/安装/测试</h2><ol>
<li><p>获取tensorflow源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tensorflow/tensorflow.git</span><br><span class="line">cd tensorflow</span><br><span class="line">git checkout r2.2 # 对于jetpack 3.3</span><br></pre></td></tr></table></figure></li>
<li><p>配置/编译 (编译特别耗时, 在全功率模式下TX2需要大约13h, AGX需要大约6h::建议起一个防断连接session(例如tmux), 否则编译到一半连接没了那真的是emo了)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置正确的python路径，CUDA那一项输入y，其他全部回车跳过</span><br><span class="line">./configure</span><br><span class="line"># 注意设置output_base路径，如果跨盘会导致编译比不跨盘慢很多。默认为~/.cache/</span><br><span class="line">bazel --output_base=/experiment/tensorflow_pkg build --verbose_failures --config=noaws --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line">./bazel-bin/tensorflow/tools/pip_package/build_pip_package /experiment/tensorflow_tmp</span><br></pre></td></tr></table></figure></li>
<li><p>安装tensorflow .whl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install /experiment/tensorflow_tmp/tensorflow-$version-$tags.whl</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt; import tensorflow # 冒烟测试</span><br><span class="line">&gt;&gt; exit()</span><br><span class="line">GPU/mnist测试 #参考 https://github.com/peterlee0127/tensorflow-nvJetson/tree/master/tf-test</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="潜在问题"><a href="#潜在问题" class="headerlink" title="潜在问题"></a>潜在问题</h1><ol>
<li>pip3安装h5py编译不通过: 全部使用root账户安装pip3依赖库</li>
<li>local_cuda_not_found的编译错误: 切换已知可用版本(tensorflowr2.5+jetpack 4.5+版本可能会出现此错误)</li>
<li>c++ compiling error+cannot write file: 需要至少32GB外置储存设备，NVIDIA Jetson系列的内置储存(通常为32GB)不足以容纳编译tensorflow产生的大量中间文件</li>
<li>c++ compiling error+process xx killed: 对于TX2/Nano一定要先设置8GB交换区(swap)，否则会出现内存不足错误</li>
<li>cannot import name ‘function_pb2’: 切换当前目录，不要在tensorflow源代码路径import tensorflow</li>
<li>能够编译+pip安装，但无法通过测试，执行测试文件卡住: 由于jetpack默认安装的CUDA/CUDNN版本和tensorflow官方推荐版本不匹配，可能会出现类似的兼容性问题。可能的解决方案: (1)使用推荐版本编译 (2)从jetpack下载/编译对应版本的CUDA/CUDNN，再编译tensorflow (3)到<a href="https://forums.developer.nvidia.com/">NVIDIA开发者论坛</a>提问，但目前官方也没有很好的解决办法。</li>
<li>C++ compilation of rule ‘//tensorflow/python:bfloat16_lib’ failed (Exit 1): 对于tensorflow&lt;=2.2 可能是因为numpy版本太高不兼容，使用conda/pip降级numpy版本 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install &#x27;numpy&lt;1.19.0&#x27;</span><br><span class="line"># conda install &#x27;numpy&lt;1.19.0&#x27;</span><br></pre></td></tr></table></figure></li>
<li>Runtime error: “CUDA driver version is insufficient for CUDA runtime version”。手动安装了个cuda10.2+cudnn7.0，这两者会冲突。重新链接cuda9.0+cudnn7.0编译，一切就正常了。</li>
<li>执行长时间python tensorflow脚本后，可能会出现再执行tensorflow脚本就出现CUDA_UNKNOWN_ERROR并异常退出情况。猜测可能是tensorflow自身的bug或者内存问题。解决方案：重新启动，pip uninstall tensorflow; pip install tensorflow-xxx.whl</li>
<li>tensorflow启动GPU需要非常久（例如在TX2上启动ResNet50的训练需要加载20min以上）: 设置环境变量<code>export CUDA_CACHE_MAXSIZ=&quot;2147483648&quot;</code></li>
<li>import numpy/tensorflow 出现core dumped: 降级numpy版本&lt;=1.18.5</li>
<li>h5py安装编译很长时间，持续无法编译通过，虽然Cython已经安装，但报错类似’Cython is not installed’: 降级numpy版本&lt;=1.18.5</li>
</ol>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>NVIDIA Jetson开发套件刷机教程</title>
    <url>/post/12cc.html</url>
    <content><![CDATA[<p>NVIDIA Jetson的是arm64架构具有GPU的开发组件。相应地，很多系统库/深度学习库不能够容易地被找到。为了一劳永逸解决此类依赖问题，NVIDIA官方提供了刷机(flash)工具包(Jetpack)。本文主要介绍<b>Jetpack刷机</b>的技术细节。</p>
<p>此外JetsonHacks提供了官方刷机教学视频，如果看本文还是不清楚一些细节，可以看视频一步步跟着学: <a href="https://www.youtube.com/watch?v=Pncjv6FoQzU">Jetpack 4.2安装</a> <a href="https://www.youtube.com/watch?v=D7lkth34rgM">Jetpack 3.0安装</a></p>
<p>老版本的刷机教程也可以参考<a href="https://metrixlambert.github.io/2019/06/01/Jetson-TX2-%E5%AE%8C%E6%95%B4%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/">Jetson TX2 完整刷机教程</a>。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li><p>一台带有Intel或AMDx86架构的Ubuntu操作系统的电脑作为host主机 (Jetpack 4.x推荐系统为Ubuntu 18.04)。</p>
</li>
<li><p>物理空间：需要至少40G以上的物理空间。Jetpack和Jetpack下载的安装包需要的空间十分庞大。</p>
</li>
<li><p>下载Jetpack安装包：申请Nvidia developer账号，在<a href="https://developer.nvidia.com/embedded/jetpack">NVIDIA官方网站</a>根据开发板的型号登录后下载。建议下载当前最新版本Jetpack 4.6。</p>
</li>
<li><p>只需要确保host主机能够上网<b style='color:red;'>(开发板没有网络也能刷机)</b>。</p>
</li>
<li><p>准备一根Micro-USB的数据线(一般手机充电线即可)(备注: AGX Xavier/AGX Orin只需要TypeC-USB数据线)，一根HDMI线，一个屏幕。</p>
</li>
</ol>
<h1 id="安装Jetpack"><a href="#安装Jetpack" class="headerlink" title="安装Jetpack"></a>安装Jetpack</h1><ol>
<li><p>断开开发板电源，断开开发板网线，数据线连接开发板和host主机。双击运行Jetpack安装包，然后命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdkmanager # 此处不能使用root</span><br></pre></td></tr></table></figure>
<p>Nvidia developer账号登录后，进入step 1: 勾选host和target，选择需要刷机的设备类型(如果数据线连接正常，也会自动检测出设备)。</p>
</li>
<li><p>进入step 2: 创建2个新文件夹，用于存放下载库文件和target镜像文件。</p>
</li>
<li><p>点击继续进入step 3: 进入下载阶段，完成后自动进入install OS阶段。</p>
</li>
<li><p>Jetpack会自动提示，是否自动刷机(auto flash)/手动刷机(manual flash)。建议选择手动刷机(manual flash)，然后开启强制恢复模式，以TX2为例: </p>
<p> (a) 保证开发板初始处于断电状态，确保Micro USB线正常连接</p>
<p> (b) 接通开发板电源，按下power开机，然后迅速按住recovery键不松开，按一下reset键，过2秒松开recovery键</p>
<p> (c) 此时应该有2个绿灯亮起</p>
</li>
<li><p>验证是否处于强制恢复状态，在host命令行输入</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsusb # 如果有Nvidia Corp设备检测到说明正确进入了强制恢复状态，否则重复第4步</span><br></pre></td></tr></table></figure></li>
<li><p>给开发板连上HDMI线+屏幕，等待开发板的ubuntu系统初始化(配置账号密码)。</p>
</li>
<li><p>Jetpack会提示要求选择连接方式+输入账号密码。此时选择使用USB连接，不要修改默认的ip地址，输入开发板的ubuntu系统的账号密码。</p>
</li>
<li><p>冗长的等待，等待所有库全部安装完成，进入step 4: 点击exit退出sdkmanger。</p>
</li>
</ol>
<h1 id="进一步配置"><a href="#进一步配置" class="headerlink" title="进一步配置"></a>进一步配置</h1><p>给开发板连接网线并查看ip。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig | grep eth0 -a1</span><br></pre></td></tr></table></figure>

<p>随后可以ssh进行连接和进一步配置。</p>
<h1 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h1><ol>
<li><p>网络下载太慢<br>更换能过墙+带宽足够的环境。</p>
</li>
<li><p>Jetpack报奇怪的错(例如dependencies error)<br>更换纯净的ubuntu 18.04 host，多数是系统问题。不要想着fix这些error，有这时间不如重装/换靠谱的host。</p>
</li>
<li><p>有2个CPU核心不工作(性能问题)<br>将/boot/extlinux/exltinux.conf 文件里的<code>isolcpus=1-2</code>修改为<code>isolcpus=</code>，参考<a href="
https://blog.csdn.net/JanKin_BY/article/details/120441238">解决方案</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>NVIDIA Jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>python中使用networkx画图</title>
    <url>/post/2395.html</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>今天被问了一个问题：如何把复杂的调用树可视化？</p>
<p>首先，这个问题可以被归结为：如何实现有向图的可视化。</p>
<p>当然，答案有很多种。可选的简单地解决方案可能是<a href="http://bookshadow.com/weblog/2016/11/22/echarts-directed-graph-visualization/">基于echarts的在线的生成工具</a> [1]，或是<a href="https://antv.vision/en">Ant V</a> [2]此类专用于画图的框架。本文主要介绍使用python中的networkx宏包作图。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>python 2.7.17: 依赖库为matplotlib, networkx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br><span class="line">pip install networkx</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import networkx as nx</span><br><span class="line"></span><br><span class="line">G=nx.DiGraph()</span><br><span class="line">list=[(1,2),(1,3),(2,4),(&quot;source&quot;,&quot;end&quot;)]</span><br><span class="line">G.add_edges_from(list)</span><br><span class="line">nx.draw(G,with_labels=True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>具体的nerworkx用法参见<a href="https://www.cnblogs.com/ljhdo/p/10662902.html">已有博客</a> [3]或者<a href="https://networkx.github.io/documentation/stable/tutorial.html">networkx官方文档</a> [4]，此处不再赘述。</p>
<p>值得一提的是，虽然python编码相对方便，但是画图的速度远不及基于JavaScript的各种框架。<code>nx.draw(G,with_labels=True)</code>这一行的执行速度非常慢，即使图中只有不超过10个节点也花了近半分钟进行生成。如果需要实时性高的生成，建议使用前文中的[1][2]或类似框架。</p>
<p><img src="/image/networkx.png" alt="效果图"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] 利用echarts实现有向图可视化,<br><a href="http://bookshadow.com/weblog/2016/11/22/echarts-directed-graph-visualization/">http://bookshadow.com/weblog/2016/11/22/echarts-directed-graph-visualization/</a><br>[2] AntV, <a href="https://antv.vision/en">https://antv.vision/en</a><br>[3] networkx, <a href="https://www.cnblogs.com/ljhdo/p/10662902.html">https://www.cnblogs.com/ljhdo/p/10662902.html</a><br>[4] networkx tutorial,<br><a href="https://networkx.github.io/documentation/stable/tutorial.html">https://networkx.github.io/documentation/stable/tutorial.html</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于maven的test-repo发生build-failure的解决方案</title>
    <url>/post/61823.html</url>
    <content><![CDATA[<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>因实验需要，收集了一些Maven project在Ubuntu 16.04 LTS上进行mvn test/mvn compile等操作。有时会发生BUILD FAILURES。本文描述几个详细的案例及解决方案，供以后遇到类似情况参考。</p>
<h2 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h2><p>project地址：<a href="https://github.com/brettwooldridge/HikariCP.git">https://github.com/brettwooldridge/HikariCP.git</a><br>表现：某个test异常卡顿（OSGI这个test），出现HTTPS 501问题，然后该test fail导致BUILD FAILURES。<br>分析：查找发现HTTPS 501的原因是默认没有使用https的central源，在2020年1月后强制使用https，否则就会报501错误。在更换maven源之后仍然没有解决这个问题。<br>解决方案：在pom.xml的surefire configuration里配置exclude该test，问题解决（基本不影响执行时间）。</p>
<h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>project地址：<a href="https://github.com/apache/log4j.git">https://github.com/apache/log4j.git</a><br>表现：使用python脚本os.system(“mvn test &gt;&gt; output.txt”)<br>分析：log4j可能在测试中使用了某些输入输出流，与脚本中的流冲突导致fail。<br>解决方案：尝试手动mvn test，问题解决。</p>
<h2 id="java-apns"><a href="#java-apns" class="headerlink" title="java-apns"></a>java-apns</h2><p>project地址：<a href="https://github.com/notnoop/java-apns.git">https://github.com/notnoop/java-apns.git</a><br>表现：integration test中的FeedbackTest出现大量Exception，然后build流程卡顿不动。具体见<a href="https://github.com/notnoop/java-apns/issues/370%E3%80%82">https://github.com/notnoop/java-apns/issues/370。</a><br>分析：尝试用类似于HikariCP的解决方案exclude FeedbackTest，然而其它integration test也出现error。把整个integration test都exclude后，剩余BUILD时间只有15秒左右，执行时间变化很大。<br>解决方案：目前未解决。<strong>TODO</strong></p>
<h2 id="OpenTripPlanner"><a href="#OpenTripPlanner" class="headerlink" title="OpenTripPlanner"></a>OpenTripPlanner</h2><p>project地址：<a href="https://github.com/opentripplanner/OpenTripPlanner.git">https://github.com/opentripplanner/OpenTripPlanner.git</a><br>表现：使用alimaven源出现大量Could not resolve artifact，在compile阶段开始前即BUILD FAILURES。<br>分析：查找发现此类问题大概率是由网络问题导致。在把alimaven源还原成central源后，download速率变慢很多，但仍未解决could not resolve artifact。<br>解决方案：更改pom.xml的配置，原有pom中配置的源是硬编码的已经失效。更改一些依赖的版本号。</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven的源配置(更新)</title>
    <url>/post/34617.html</url>
    <content><![CDATA[<p>阿里云云效maven的站点查询 <a href="https://maven.aliyun.com/mvn/view">https://maven.aliyun.com/mvn/view</a></p>
<ol>
<li>打开${maven_home}/conf/settings.xml</li>
<li><mirrors>中添加以下内容。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-public&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun public&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-central&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun central&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-spring&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun spring&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-spring-plugin&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun spring-plugin&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/spring-plugin&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-apache-snapshots&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun apache-snapshots&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-google&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun google&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/google&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-gradle-plugin&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun gradle-plugin&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/gradle-plugin&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-jcenter&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun jcenter&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/jcenter&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-releases&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun releases&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/releases&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-snapshots&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun snapshots&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/snapshots&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;    </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-grails-core&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun grails-core&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/grails-core&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-mapr-public&lt;/id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun mapr-public&lt;/name&gt;     </span><br><span class="line"> &lt;url&gt;https://maven.aliyun.com/repository/mapr-public&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>转载<a href="https://segmentfault.com/a/1190000018147680">https://segmentfault.com/a/1190000018147680</a></p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Response-Letter的写作</title>
    <url>/post/43019.html</url>
    <content><![CDATA[<h2 id="Response-Letter是什么"><a href="#Response-Letter是什么" class="headerlink" title="Response Letter是什么"></a>Response Letter是什么</h2><p>在投稿期刊论文时，需要进行一至多轮的review。在收到review结果后，论文作者需要整理该结果中的问题，并对其逐一进行解答。本文简要概述response letter写作中的注意事项。</p>
<h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>介绍response letter的结构。</p>
<h3 id="Our-first-submission"><a href="#Our-first-submission" class="headerlink" title="Our first submission"></a>Our first submission</h3><p>简要解释初稿的大致内容和贡献。</p>
<h3 id="Our-second-submission"><a href="#Our-second-submission" class="headerlink" title="Our second submission"></a>Our second submission</h3><p>简要解释第二次投稿（如果有）在第一稿上的改动；如果有第三次投稿就再增加Our third submission。</p>
<h3 id="Our-revised-submission"><a href="#Our-revised-submission" class="headerlink" title="Our revised submission"></a>Our revised submission</h3><p>简要解释最后一次改动后修改的内容。</p>
<h3 id="Answer-to-Comment-Editor"><a href="#Answer-to-Comment-Editor" class="headerlink" title="Answer to Comment: Editor"></a>Answer to Comment: Editor</h3><p>对编辑的review意见的回复。</p>
<h3 id="Answer-to-Comment-Reviewer-X"><a href="#Answer-to-Comment-Reviewer-X" class="headerlink" title="Answer to Comment: Reviewer X"></a>Answer to Comment: Reviewer X</h3><p>对reviewer X意见的回复；需要对每个reviewer的意见分别逐一回复。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>Response letter中的引用。</p>
<h2 id="写作核心思想"><a href="#写作核心思想" class="headerlink" title="写作核心思想"></a>写作核心思想</h2><ol>
<li><p>Reviewer问什么，就回答什么。不要回答无关内容。</p>
</li>
<li><p>回答逻辑上要合理：先回答一般性内容，再回答细节内容。</p>
</li>
</ol>
<h2 id="写作细节问题"><a href="#写作细节问题" class="headerlink" title="写作细节问题"></a>写作细节问题</h2><ol>
<li><p>每个comment的回答第一句要写上：”Thank you for the comment.”</p>
</li>
<li><p>如果需要在回答中引用reviewer的原话，需要斜体+引号。</p>
</li>
<li><p>专有名词设置成macro，保持格式/语法一致（例如统一斜体）。</p>
</li>
<li><p>文中新定义的名词如果需要使用缩写，在定义时即可说明，然后统一使用缩写。不应在定义前提及新定义名词。</p>
</li>
<li><p>双引号要正确使用：latex中是``和’’，而不是“”。</p>
</li>
</ol>
<h2 id="Latex模板"><a href="#Latex模板" class="headerlink" title="Latex模板"></a>Latex模板</h2><p><a href="https://www.overleaf.com/2454561743cmwzvycpggpv">https://www.overleaf.com/2454561743cmwzvycpggpv</a></p>
]]></content>
      <categories>
        <category>writing</category>
      </categories>
      <tags>
        <tag>journal</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next主题配置之怎么配成我这样</title>
    <url>/post/43164.html</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>这篇文用来介绍本站点使用的Hexo+Next主题配置及各种相关的依赖配置。</p>
<span id="more"></span>

<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>什么是hexo：一个基于Node.js的博客框架<br>什么是next：hexo的一个主题</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="第一步：Node-js，npm环境配置"><a href="#第一步：Node-js，npm环境配置" class="headerlink" title="第一步：Node.js，npm环境配置"></a>第一步：Node.js，npm环境配置</h3><p>Windows：移步<a href="https://juejin.im/post/5a92b735f265da4e761fea22">https://juejin.im/post/5a92b735f265da4e761fea22</a><br>MacOS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install npm</span><br></pre></td></tr></table></figure>

<h3 id="第二步：hexo的安装"><a href="#第二步：hexo的安装" class="headerlink" title="第二步：hexo的安装"></a>第二步：hexo的安装</h3><p>Windows：这有个坑“所有hexo命令前需要加npx，不然就会：’hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件。”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npx hexo init your-hexo-site</span><br><span class="line">$ cd your-hexo-site</span><br><span class="line">$ npm install</span><br><span class="line">$ npx hexo server</span><br></pre></td></tr></table></figure>
<p>MacOS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init your-hexo-site</span><br><span class="line">$ cd your-hexo-site</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="第三步：Next的安装"><a href="#第三步：Next的安装" class="headerlink" title="第三步：Next的安装"></a>第三步：Next的安装</h3><p><strong>这里只针对v7.8及以上版本，老的版本教程很多过时了</strong></p>
<h4 id="从源安装Next主题"><a href="#从源安装Next主题" class="headerlink" title="从源安装Next主题"></a>从源安装Next主题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br><span class="line">$ # next的git repo迁移过了，用官方的</span><br></pre></td></tr></table></figure>

<h4 id="改动站点根目录下的-config-yml，指定使用Next主题"><a href="#改动站点根目录下的-config-yml，指定使用Next主题" class="headerlink" title="改动站点根目录下的_config.yml，指定使用Next主题"></a>改动站点根目录下的_config.yml，指定使用Next主题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>改动theme/next目录下的_config.yml，更改Next样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line"># 设置站点配置语言</span><br><span class="line">language: zh-CN #简体中文，英文是en</span><br><span class="line"></span><br><span class="line"># 改作者名</span><br><span class="line">copyright: your-name</span><br><span class="line"></span><br><span class="line"># 自定义配置文件路径，注意！此处路径是在Hexo目录下而非theme/next目录下</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  #footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<h4 id="自定义样式文件"><a href="#自定义样式文件" class="headerlink" title="自定义样式文件"></a>自定义样式文件</h4><p>variables.styl内容是（值得一提的是，原作者的设置也在这里做出了改动）-&gt; 这个蓝色不能覆盖左上角Blog名称，非常难看</p>
<p>也可以不改variables.styl 采用默认的next配色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"></span><br><span class="line">/* 背景设置 */</span><br><span class="line">/* 给页面内的所有元素设置一个带透明度的白色背景色 */</span><br><span class="line">// 页面的几大部分</span><br><span class="line">[class=&quot;container sidebar-position-left &quot;], .main, [class$=&quot;page-home&quot;] #footer,</span><br><span class="line">[class$=&quot;page-post-detail&quot;] #footer, .page-archive &#123;</span><br><span class="line">    background: rgba(255, 255, 255, 0.83);</span><br><span class="line">&#125;</span><br><span class="line">[class=&quot;container sidebar-position-left &quot;] .main,</span><br><span class="line">[class$=&quot;sidebar-position-left&quot;] #footer, .page-archive .main &#123;</span><br><span class="line">    background: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.pagination, .post-block, .comments,</span><br><span class="line">.container .header-inner, .sidebar-inner &#123;</span><br><span class="line">    background: rgba(255, 255, 255, 0.45);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 评论区</span><br><span class="line">.gt-comment-content &#123;</span><br><span class="line">    background-color: rgba(255, 255, 255, 0.42) ;</span><br><span class="line">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        box-shadow: 0 2px 2px 0 #6190e8b8, 0 3px 1px -2px #6190e8b8, 0 1px 5px 0 #6190e8b8 !important;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 显示目录的侧边栏</span><br><span class="line">#sidebar &#123;</span><br><span class="line">    background: rgba(255, 255, 255, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 菜单</span><br><span class="line">.menu .menu-item a:hover &#123;</span><br><span class="line">    background: #2222223b;</span><br><span class="line">    border-bottom-color: transparent;   </span><br><span class="line">&#125;</span><br><span class="line">.menu-item-active a &#123;</span><br><span class="line">    background: #fbcb3fbd;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NexT主题特有的选项卡元素</span><br><span class="line">.tabs ul.nav-tabs li.tab.active,</span><br><span class="line">.tabs .tab-content &#123;</span><br><span class="line">    background-color: rgba(255, 255, 255, 0.62) !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 页面中某些部分的大小 */</span><br><span class="line">// 归档页面的页脚</span><br><span class="line">.page-archive #footer &#123;</span><br><span class="line">    position: inherit;</span><br><span class="line">    height: auto;</span><br><span class="line">    padding-top: 2.7%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 详细分类页面和总分类页面的页脚</span><br><span class="line">[class$=&quot;sidebar-position-left &quot;] #footer,</span><br><span class="line">[class$=&quot;page-post-detail&quot;] #footer &#123;</span><br><span class="line">    padding-top: 3.98%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 详细分类页面的主要部分</span><br><span class="line">[class$=&quot;sidebar-position-left &quot;] &#123;</span><br><span class="line">    padding-bottom: calc(100vh - 89.5vh);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 侧边栏目录 */</span><br><span class="line">// 普通状态下的超链接状态</span><br><span class="line">.post-toc ol a &#123;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        border-bottom-color: #666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// active状态下的超链接样式</span><br><span class="line">.post-toc .nav li[class$=&quot;active&quot;]&gt;.nav-link &#123;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        border-bottom-color: #fc6423;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当前正在访问的超链接样式</span><br><span class="line">.post-toc .nav li[class$=&quot;active-current&quot;]&gt;.nav-link &#123;</span><br><span class="line">    color: white;</span><br><span class="line">    background: #337ab7;</span><br><span class="line">    border-radius: 3.6px;</span><br><span class="line">    display: block;</span><br><span class="line">    padding: 5px 7px;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        background: orange;</span><br><span class="line">        color: black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">.site-state-item &#123;</span><br><span class="line">    border-left: 1px solid #b1b1b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 各级目录的显示宽度 - 主要是为了不让边框超出侧边栏</span><br><span class="line">.post-toc .nav .active-current.nav-level-2 a &#123;</span><br><span class="line">    width: 303px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-3 a &#123;</span><br><span class="line">    width: 296px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-4 a &#123;</span><br><span class="line">    width: 286px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-5 a &#123;</span><br><span class="line">    width: 276px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-6 a &#123;</span><br><span class="line">    width: 266px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc &#123;</span><br><span class="line">    width: calc(100% + 17px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 标题 */</span><br><span class="line">// 点进文章，文章的主标题</span><br><span class="line">.posts-expand article:only-of-type h1 &#123;</span><br><span class="line">    font-size: 37px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 二级标题(正常显示器分辨率)</span><br><span class="line">// 其实要在左下角和右下角加上一个折角、翻折的效果（一个三角形）</span><br><span class="line">.post-body h2 &#123;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    height: 48px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    margin: 20px -42.3px 15px -48px;</span><br><span class="line">    padding-left: 1.7%;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: #ecf6f7;</span><br><span class="line">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 二级标题(移动终端分辨率)</span><br><span class="line">@media (min-width: 768px) and (max-width: 991px) &#123;</span><br><span class="line">    .main .post-body h2 &#123;</span><br><span class="line">        margin: 20px -23px 15px -28px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">    .main .post-body h2 &#123;</span><br><span class="line">        margin: 20px -15px 15px -18px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 三级标题</span><br><span class="line">.post-body h3 &#123;</span><br><span class="line">    border-bottom: 1px solid #cfd8dc!important;</span><br><span class="line">    padding-bottom: 0.3em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 文章页面内的各种元素 */</span><br><span class="line">// note块元素</span><br><span class="line">.post-body .note &#123;</span><br><span class="line">    border-color: #ddd;</span><br><span class="line">    background-color: #f9f9f980;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章内的普通超链接</span><br><span class="line">.post-body a &#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    // border-bottom: none;</span><br><span class="line">    // 这行会把阅读全文图标干掉，慎用</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FF4500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//代码块内的超链接</span><br><span class="line">.post-body a code &#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FF4500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 分页导航（上/下一篇文章的超链接）</span><br><span class="line">.post-nav-item a &#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FF4500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 阅读全文的按钮</span><br><span class="line">.post-button a &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        font-size: larger;</span><br><span class="line">        background-color: cornsilk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 阅读全文按钮的超链接</span><br><span class="line">.post-button .btn &#123;</span><br><span class="line">    border-bottom: 2px solid #555;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 无序列表</span><br><span class="line">.posts-expand .post-body ul li &#123;</span><br><span class="line">    list-style: disc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 有序列表</span><br><span class="line">.posts-expand .post-body ol &#123;</span><br><span class="line">    counter-reset: counter;</span><br><span class="line">&#125;</span><br><span class="line">.posts-expand .post-body ol&gt;li &#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.posts-expand .post-body ol&gt;li:before &#123;</span><br><span class="line">    counter-increment: counter;</span><br><span class="line">    content: counter(counter);</span><br><span class="line">    background: #49b1f5; </span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    font-weight: 500;</span><br><span class="line">    line-height: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 3px;</span><br><span class="line">    height: 13px;</span><br><span class="line">    width: 13px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -27px;</span><br><span class="line">    top: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// fancybox图片</span><br><span class="line">.posts-expand .post-body .fancybox img &#123;</span><br><span class="line">    display: block !important;</span><br><span class="line">    margin-left: 0px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    cursor: zoom-in;</span><br><span class="line">    cursor: -webkit-zoom-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 图片底下的描述性文字</span><br><span class="line">.post-body .image-caption, .post-body .figure .caption &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// label块</span><br><span class="line">.post-body .label &#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    border-radius: .25em;</span><br><span class="line">    margin: 0px 3px 0px 3px;</span><br><span class="line">    padding: 3px 4px;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.primary &#123;</span><br><span class="line">    background-color: #ecd6ff;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.info &#123;</span><br><span class="line">    background-color: #c3e8f9;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.success &#123;</span><br><span class="line">    background-color: #b2eabb;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.default &#123;</span><br><span class="line">    background-color: #dcdcdc;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.warning &#123;</span><br><span class="line">    background-color: #ffe89a;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.danger &#123;</span><br><span class="line">    background-color: #f9c1ca;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 代码区</span><br><span class="line">.highlight .code pre &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.highlight &#123;</span><br><span class="line">    background-color: #f9f9f980;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 原样输出的代码块</span><br><span class="line">pre &#123;</span><br><span class="line">    background: #f9f9f980;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line">pre code &#123;</span><br><span class="line">    border: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 块引用</span><br><span class="line">blockquote &#123;</span><br><span class="line">    background-color: #f9f9f980;</span><br><span class="line">    border-left-color: #6b8afb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 表格奇数行</span><br><span class="line">.highlight table&gt;tbody&gt;tr &#123;</span><br><span class="line">    &amp;:nth-of-type(odd) &#123; </span><br><span class="line">        background-color: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 表格每一行鼠标经过时的颜色</span><br><span class="line">table&gt;tbody&gt;tr &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        background-color: #FFFFF0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 表格的单元格</span><br><span class="line">table td, table th &#123;</span><br><span class="line">    border-right: 1px solid #dcdcdc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧边栏头部</span><br><span class="line">.site-meta &#123;</span><br><span class="line">    background: #0072E3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章底部的标签</span><br><span class="line">.posts-expand .post-tags a &#123;</span><br><span class="line">    background: #e6e6e6;</span><br><span class="line">    padding: 3px 4px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    color: #2ca6cb;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: white;</span><br><span class="line">        background: #2ca6cb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 分割线</span><br><span class="line">hr &#123;</span><br><span class="line">    margin: 0px 0px 0px 0px;</span><br><span class="line">    height: 1px;</span><br><span class="line">    border: none;</span><br><span class="line">    background-image: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// code代码块</span><br><span class="line">code &#123;</span><br><span class="line">    background: #dcdcdc;</span><br><span class="line">    margin: 0 2px 0 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选项卡被选中的那一项</span><br><span class="line">.tabs ul.nav-tabs li.tab.active a &#123;</span><br><span class="line">    font-size: 19px;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 浏览器滚动条</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 8px;</span><br><span class="line">    height: 8px;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background: #49b1f5;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>styles.styl的内容是（用于调整主题显示宽度）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$content-desktop         = 97.7%</span><br><span class="line">$content-desktop-large   = 97.7%</span><br><span class="line">$content-desktop-largest = 97.7%</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="自定义背景图"><a href="#自定义背景图" class="headerlink" title="自定义背景图"></a>自定义背景图</h4><p>根据自定义样式原作者ExtremeGTR的博客描述：<br>    “自定义背景图的配置还是没法解耦出来，或许只是我想不到办法而已，我的自定义配置仍然要写到NexT的js文件里，但还是有一点点变化的。<br>    自定义[]的配置要写到\themes\next\source\js\next-boot.js里。”<br><strong>刷新界面随机加载背景图</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    // 在最开头或者任意一处加入我们的功能：随机选取1个背景图并加载的代码</span><br><span class="line">    var backgroundImgUrls = [</span><br><span class="line">        &quot;图片地址1&quot;,</span><br><span class="line">        &quot;图片地址2&quot;,</span><br><span class="line">        &quot;图片地址3&quot;,</span><br><span class="line">        &quot;图片地址4&quot;,</span><br><span class="line">        &quot;图片地址5&quot;,</span><br><span class="line">        &quot;图片地址6&quot;,</span><br><span class="line">        // ...</span><br><span class="line">        &quot;图片地址n&quot;</span><br><span class="line">    ];</span><br><span class="line">    var randomIndex = Math.floor(Math.random() * (backgroundImgUrls.length + 1));</span><br><span class="line">    if (randomIndex == backgroundImgUrls.length) &#123;</span><br><span class="line">        $(&quot;body&quot;).css(&#123;&quot;background-color&quot;:&quot;white&quot;&#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var background_image = &quot;url(&quot; + backgroundImgUrls[randomIndex] + &quot;)&quot;;</span><br><span class="line">        $(&quot;body&quot;).css(&#123;&quot;background&quot;:background_image, &quot;background-attachment&quot;:&quot;fixed&quot;, &quot;background-size&quot;:&quot;cover&quot;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    //...NexT原有的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="点击出现小红心"><a href="#点击出现小红心" class="headerlink" title="点击出现小红心"></a>点击出现小红心</h4><p>在<code>\theme\*\source\js</code>下新建click.js复制以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>
<p>在<code>\themes\*\layout\_layout.swig</code>文件末尾添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/click.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="改动主题配置文件-config-yml"><a href="#改动主题配置文件-config-yml" class="headerlink" title="改动主题配置文件_config.yml"></a>改动主题配置文件_config.yml</h4><p>激活gitalk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Multiple Comment System Support</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">  active: gitalk</span><br><span class="line">  # Setting `true` means remembering the comment system selected by the visitor.</span><br><span class="line">  storage: true</span><br><span class="line">  # Lazyload all comment systems.</span><br><span class="line">  lazyload: false</span><br><span class="line">  # Modify texts or order for any navs, here are some examples.</span><br><span class="line">  nav:</span><br><span class="line">    #disqus:</span><br><span class="line">    #  text: Load Disqus</span><br><span class="line">    #  order: -1</span><br><span class="line">    #gitalk:</span><br><span class="line">    #  order: -2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id:  # GitHub repo owner</span><br><span class="line">  repo:  # Repository name to store issues</span><br><span class="line">  client_id:  # GitHub Application Client ID</span><br><span class="line">  client_secret:  # GitHub Application Client Secret</span><br><span class="line">  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: en</span><br></pre></td></tr></table></figure>

<h3 id="第四步：插件配置"><a href="#第四步：插件配置" class="headerlink" title="第四步：插件配置"></a>第四步：插件配置</h3><p>这里是<a href="https://hexo.io/plugins/">hexo插件全家桶</a>的页面，以下推荐:</p>
<h4 id="hexo-deploy-git插件配置"><a href="#hexo-deploy-git插件配置" class="headerlink" title="hexo-deploy-git插件配置"></a><strong>hexo-deploy-git</strong>插件配置</h4><p>用途：hexo deploy一键部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/your-id/your-id.github.io</span><br><span class="line">  branch: master</span><br><span class="line">  message: </span><br></pre></td></tr></table></figure>

<h4 id="symbols-count-time插件配置"><a href="#symbols-count-time插件配置" class="headerlink" title="symbols_count_time插件配置"></a><strong>symbols_count_time</strong>插件配置</h4><p>用途：计算字数和阅读时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<p>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<h4 id="hexo-generator-searchdb插件配置"><a href="#hexo-generator-searchdb插件配置" class="headerlink" title="hexo-generator-searchdb插件配置"></a><strong>hexo-generator-searchdb</strong>插件配置</h4><p>用途：站点内搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>!注意此处不要-g全局安装</p>
<p>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure>

<p>在Next主题的_config.yml文件修改<code>local search</code><br>把enable: false修改为true</p>
<h4 id="hexo-helper-live2d插件配置"><a href="#hexo-helper-live2d插件配置" class="headerlink" title="hexo-helper-live2d插件配置"></a><strong>hexo-helper-live2d</strong>插件配置</h4><p>用途：萌萌哒</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>可以上github找找喜欢的模型，以下使用<ModelName>指代模型名称:<br>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-&lt;ModelName&gt;</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>
<p>在Hexo站点根目录下新建文件夹<code>live2d_models</code><br>然后在<code>node_modules</code>文件夹下找到下载好的模型，拷贝到<code>live2d_models</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd &lt;hexo-root-path&gt;</span><br><span class="line">$ mkdir live2d_models</span><br><span class="line">$ npm install live2d-widget-model-&lt;ModelName&gt;</span><br><span class="line">$ cp -r node_modules/live2d-widget-model-&lt;ModelName&gt; live2d_models</span><br></pre></td></tr></table></figure>

<h4 id="travis-CI配置"><a href="#travis-CI配置" class="headerlink" title="travis-CI配置"></a><strong>travis-CI配置</strong></h4><p>详见<a href="https://hexo.io/docs/github-pages.html%EF%BC%8C%E4%BD%9C%E8%80%85%E6%B2%A1%E9%85%8D%E7%9B%B4%E6%8E%A5%E6%9C%AC%E5%9C%B0hexo">https://hexo.io/docs/github-pages.html，作者没配直接本地hexo</a> generate &amp;&amp; hexo deploy</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://juejin.im/post/5a92b735f265da4e761fea22">https://juejin.im/post/5a92b735f265da4e761fea22</a><br>[2] <a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a><br>[3] <a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a><br>[4] <a href="https://extremegtr.github.io/2017/09/27/Customize-NexT-Gemini-theme/">https://extremegtr.github.io/2017/09/27/Customize-NexT-Gemini-theme/</a><br>[5] <a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">https://hexo.io/zh-cn/docs/one-command-deployment.html</a><br>[6] <a href="https://hexo.io/docs/github-pages.html">https://hexo.io/docs/github-pages.html</a><br>[7] <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写maven插件（重新发布）</title>
    <url>/post/undefined.html</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>maven作为热门的build system经常被各种Java project采用。有时我们会遇到需要编写自定义maven插件的需求。</p>
<p>以IDEA为例：首先选择从maven创建一个project，如果勾选create from achetype就会生成模板程序代码（这里以maven-achetype-mojo为例）。项目名称规范是${NAME}-maven-plugin，然后需要选择maven home directory，随后自动生成模板程序代码。</p>
<h2 id="对maven源的配置"><a href="#对maven源的配置" class="headerlink" title="对maven源的配置"></a>对maven源的配置</h2><p>值得一提的是，初次使用maven会自动下载大量依赖文件，就算有梯子，也可能非常慢。这时就需要在创建project之前先对<code>$&#123;maven_path&#125;/conf/settings.xml</code>进行设置更换国内源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对源的配置：增加localRepository，配置mirror url</span><br><span class="line">&lt;localRepository&gt;$&#123;YOUR_MAVEN_REPO_PATH&#125;&lt;/localRepository&gt;</span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">    	&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    	&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    	&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">    	&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>
<h2 id="正式开始写maven-project的代码"><a href="#正式开始写maven-project的代码" class="headerlink" title="正式开始写maven project的代码"></a>正式开始写maven project的代码</h2><h3 id="对模板程序pom-xml的修改"><a href="#对模板程序pom-xml的修改" class="headerlink" title="对模板程序pom.xml的修改"></a>对模板程序pom.xml的修改</h3><p>可以看出来maven模板程序的pom.xml配置已经非常老了（比如这个maven-plugin-api还是2.0），这里参考KIWI的一篇博客一通乱改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;$&#123;YOUR_GROUP_ID&#125;&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;$&#123;NAME&#125;-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;maven-plugin&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;$&#123;NAME&#125;-mavne-plugin Maven Mojo&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-plugin-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugin-tools&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-plugin-annotations&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Mojo类的规则简要介绍"><a href="#Mojo类的规则简要介绍" class="headerlink" title="Mojo类的规则简要介绍"></a>Mojo类的规则简要介绍</h3><p>Mojo类必须继承AbstractMojo 并实现他的 execute 方法，而 execute 方法其实就是这个插件的入口类。简单介绍注解<code>@Mojo(name = $NAME)</code>，用于定义插件相关信息，以便于在pom.xml里通过<goal>$NAME</goal>的形式显示指定。@Execute()注解则能指定Mojo的执行时机，绑定phase或lifecycle等。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>写完了代码，需要mvn clean install（把该插件打包并部署至本地仓库），其他本地maven项目就可以通过pom.xml使用该插件。想要他人也可以使用，需要使用mvn deploy命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;$&#123;YOUR_GROUP_ID&#125;&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;$&#123;NAME&#125;-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>增加依赖后，可以直接命令行<code>mvn $&#123;NAME&#125;:$&#123;GOAL&#125; [args]</code>的方式调用；也绑定至lifecycle，通过mvn test等命令调用（也可以IDEA右上角maven集成插件手动点击）。</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>c++的struct和class（重新发布）</title>
    <url>/post/4387.html</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>在学习c++的时候会遇到一个问题：<strong>什么时候使用struct，什么时候使用class？</strong></p>
<h2 id="C的struct"><a href="#C的struct" class="headerlink" title="C的struct"></a>C的struct</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct tag &#123; </span><br><span class="line">    member1;</span><br><span class="line">    member2; </span><br><span class="line">    member3;  </span><br><span class="line">    ...</span><br><span class="line">&#125; variable;</span><br></pre></td></tr></table></figure>

<p><strong>tag</strong> 是结构体标签。<br><strong>member</strong> 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。<br><strong>variable</strong> 结构变量，定义在结构的末尾，最后一个分号之前，可以指定一个或多个结构变量。<br>一般情况下，上述三个变量至少要出现2个。</p>
<p>struct不能给内部变量初始化。<br>值得一提的是，在C中struct是用来封装数据的(<strong>member</strong>可以包含一个或多个基本数据类型，也可以包含其它结构体)，但是其中不能够有成员函数。</p>
<p>想要C语言中的struct中包含成员函数，只能通过函数指针去替代成员函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">  </span><br><span class="line">void test(int input) &#123;</span><br><span class="line">        printf(&quot;%d&quot;,input);</span><br><span class="line">&#125;</span><br><span class="line">typedef struct _tag &#123;</span><br><span class="line">        void (*func)(int);</span><br><span class="line">&#125; Tag;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  Tag tag;</span><br><span class="line">  tag.func = &amp;test;</span><br><span class="line">  tag.func(0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-的struct"><a href="#C-的struct" class="headerlink" title="C++的struct"></a>C++的struct</h2><h3 id="C-的struct和class的关联"><a href="#C-的struct和class的关联" class="headerlink" title="C++的struct和class的关联"></a>C++的struct和class的关联</h3><p>回到正题，c++中继承了在c语言中的用法，但是又做了改进：可以包含成员函数。从可实现功能上来看，struct和class基本上没有什么区别了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct _tag &#123;</span><br><span class="line">        void func(int input) &#123;</span><br><span class="line">                printf(&quot;%d&quot;,input);</span><br><span class="line">        &#125;;</span><br><span class="line">&#125; Tag;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  Tag tag;</span><br><span class="line">  tag.func(0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 令人疑惑的是，在mac环境下居然这段代码用gcc编译也通过了，还能正常运行。</span><br><span class="line">// 应当在ubuntu环境下是不能编译通过的。</span><br></pre></td></tr></table></figure>

<h3 id="C-的struct和class的区别"><a href="#C-的struct和class的区别" class="headerlink" title="C++的struct和class的区别"></a>C++的struct和class的区别</h3><p>默认修饰符：struct是public，class是private。以下的代码从逻辑上是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">	int A_a;</span><br><span class="line">public:</span><br><span class="line">	int A_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct B &#123;</span><br><span class="line">	int B_b;</span><br><span class="line">private:</span><br><span class="line">	int B_a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>默认继承方式是：struct是public继承，class是private继承。建议在继承时需要显示地指明修饰符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">	int A_a;</span><br><span class="line">public:</span><br><span class="line">	int A_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct B : public A &#123;</span><br><span class="line">	// 建议在继承时需要显示地指明修饰符</span><br><span class="line">	int B_b;</span><br><span class="line">private:</span><br><span class="line">	int B_a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下使用Jabref+Mendeley+OfficeWord进行文献引用（重新发布）</title>
    <url>/post/26020.html</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>很多人会在Mac下使用Office Word进行写作，有时会有文献引用的需求（比如毕业论文）。通过Office Word自带的工具进行引用费时费力，一旦插入文献可能需要大量修改。今天为大家介绍一种在Mac下使用Jabref+Mendeley+Office Word进行便捷的文献引用的方式。</p>
<p>!!!注意：常见搜索引擎会推荐BibTex4word这个插件，很不幸，这个插件不支持Mac环境 (官网明确写了it does not work on Mac)，所以不用再试了</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>环境：macOS Mojave, Microsoft Word for Mac 16.35<br>工具：Jabref(去这里下载Mac dmg), Mendeley Desktop(链接)</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在Jabref里创建新的文献记录(可以直接使用BibTex source)，保存选择生成.bib文件</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在Mendeley Desktop里创建一个账号，选择导入刚刚的.bib文件(建议新建一个文件夹导入，不然可能会弄乱列表)。</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>在Microsoft Word中选择Insert-&gt;Get Add-Ins-&gt;搜索Mendeley，装上之后在References工具栏会出现Mendeley Cite。登录刚刚创建的Mendeley账号，即可进行引用。</p>
]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>On windows, add “npx” prefix.</p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ <span class="comment"># Or</span></span><br><span class="line">$ hexo new draft <span class="string">&quot;New draft&quot;</span></span><br><span class="line">$ hexo publish <span class="string">&quot;New draft&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ <span class="comment"># Or</span></span><br><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># This will only deploy generated files to remote sites! Nedd to backup source by yourself!</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
